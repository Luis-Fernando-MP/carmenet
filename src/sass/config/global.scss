@use '@sass/config/vars' as *;
@use '@sass/config/typography' as *;
@use '@sass/utils/scrollbar' as *;
@use '@sass/utils/media' as m;
@use '@sass/utils/text' as t;
@use '@sass/utils/tooltip' as tol;
@use '@sass/utils/boxLoader' as loader;
@use 'sass:map';

*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  border: none;

  list-style: none;

  outline: none;

  &:focus {
    outline: none;
  }
}

html {
  overflow: hidden;
  font-size: $family-size;
}

@include m.mediumScreen {
  html {
    font-size: 12px;
  }
}

body {
  @extend %scroll-hidden;

  scroll-behavior: smooth;

  position: relative;

  overflow: auto;

  width: 100vw;
  max-width: 100vw;
  height: 100vh;
  max-height: 100vh;
  padding: 10px;

  font-family: $font1;
  color: rgb($fn1);

  background-color: rgb($bg1);

  .icon,
  .lucide {
    display: block;
    width: $icon;
    height: $icon;
    stroke: rgb($fn2);
  }

  ::selection {
    color: rgb($fnA);
    background-color: rgb($tn1);
  }

  .loading {
    pointer-events: none;
    user-select: none;

    @include loader.boxLoader;
  }

  .error {
    pointer-events: none;
    user-select: none;
    position: relative;
    outline: 2px solid $error;

    &::after {
      content: '';

      position: absolute;
      z-index: 1;
      top: 0;
      left: 0;

      width: 100%;
      height: 100%;

      background-color: rgb($error, 0.2);

      animation: flicker 1s infinite alternate;
    }
  }

  input {
    width: min-content;
  }

  input[type='number'] {
    appearance: textfield;

    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
      margin: 0;
      appearance: none;
    }
  }

  small,
  span,
  input {
    font-family: map.get(map.get($typography, 'p'), family);
    font-size: map.get(map.get($typography, 'p'), size);
    font-weight: map.get(map.get($typography, 'p'), weight);
    color: map.get(map.get($typography, 'p'), color);
  }

  textarea,
  button,
  select {
    font-family: map.get(map.get($typography, 'a'), family);
    font-size: map.get(map.get($typography, 'a'), size);
    font-weight: map.get(map.get($typography, 'a'), weight);
    color: map.get(map.get($typography, 'a'), color);

    background: none;
  }

  button {
    cursor: pointer;
  }

  .font3 {
    font-family: $font3;
    background: linear-gradient(90deg, rgb($tn1) 70%, rgb($fn1));
    background-clip: text;

    -webkit-text-fill-color: transparent;
  }

  .border {
    border: 1.5px solid rgb($bg3);
  }

  .active {
    color: rgb($fnA);
    background-color: rgb($tn1);

    svg {
      stroke: rgb($fnA);
    }
  }

  @each $tag, $props in $typography {
    #{$tag} {
      font-family: map.get($props, family);
      font-size: map.get($props, size);
      font-weight: map.get($props, weight);
      color: map.get($props, color);
    }
  }

  .mainGradient {
    position: absolute;

    opacity: 0.6;
    background-image: linear-gradient(-45deg, rgb($tn1) 20%, rgb($tn2) 50%, rgb($fn1) 70%, #ff9c32 80%);
    filter: blur(40px);
    box-shadow:
      30px -40px 100px 20px rgb($tn2),
      -40px -30px 100px 15px rgb($tn1);
  }
}
